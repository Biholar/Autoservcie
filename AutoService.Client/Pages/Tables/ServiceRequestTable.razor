@page "/serviceRequests"
@using AutoService.WEBAPI.Dto
@using AutoService.Client.ViewModels
@using AutoService.WEBAPI.Controllers
@using AutoService.Client.Enums

@inject ServiceRequestViewModel _viewModel;
@inject HttpClient _httpClient;
@inject IJSRuntime js;
@inject IHttpClientFactory ClientFactory;
@inject IModalService modal  


<h1 class="Title" style="font-weight: 800;">Service Requests</h1>
	<div class="functionalWrapper" style="width: 700px;display: flex; align-items: center; justify-content: flex-start;">
	
		<h20 style="font-weight: 400;font-size: 20px !important; height: 25px; width: 91px">Filter by </h20>
		<button class="btn btn-light" @onclick="async()=>await GetByState(0)" style="margin-right: 10px">Show New</button>
		<button class="btn btn-light" @onclick="async()=>await OnInitializedAsync()" style="margin-right: 10px">Show All</button>
		<div class="inputWrapper" style="width: 300px;display: flex;">
			<input @bind="seachQ" type="text" style="margin-right:10px" class="form-control" placeholder="Enter Name">
			<button class="btn btn-outline-primary" @onclick="async ()=> await FilterByName(seachQ)" style="margin-right: 10px">Search</button>
		</div>
	</div>



	
	<div class="tableWrapper">
		<table class="table table-hover table-striped-columns">
			<thead>
			<tr>
				<th style="font-weight: 800; background-color: #e6e6e6; width: 70px">#</th>
				<th style="font-weight: 800; background-color: #e6e6e6; width: 70px">Status</th>
				<th style="font-weight: 800; background-color: #e6e6e6; width: 250px">Client</th>
				<th style="font-weight: 800; background-color: #e6e6e6; width: 150px">Phone</th>
				<th style="font-weight: 800; background-color: #e6e6e6; width: 200px">Email</th>
				<th style="font-weight: 800; background-color: #e6e6e6; width: 400px">Problem</th>
				<th style="font-weight: 800; background-color: #e6e6e6; width: 70px"></th>
			</tr>
			</thead>
			
			@if (data == null)
            {
                <text>Loading...</text>
            }
            else if (!data.Any())
            {
                <text>No Records Found.</text>
            }
            else

            {
	            foreach (ServiceRequestDto entity  in data)
	            {
		            <tr id="parrent">
			            <td style="font-weight: 800">@entity.Id</td>
			            <td> @(Helper.RequestParser(entity.Statement))</td>
			            <td>@entity.FirstName @entity.SecondName</td>
			            <td>@entity.PhoneNum</td>
			            <td>@entity.Email</td>
			            <td>@entity.ProblemDesc</td>
			            <td >
				            <button id="child" class="buttonPlus" @onclick="async () => await UpdateState(entity.Id)"><i class="fa fa-check opacity-75" aria-hidden="true"></i></button>
				            <button id="child" class="buttonTrash" @onclick="async () => await DeleteRecord(entity.Id)"><i class="fa fa-trash opacity-75" aria-hidden="true"></i></button>
			            </td>
		            </tr>
	            }
            }
		</table>
	</div>

@code {
	private string? seachQ;
	List<ServiceRequestDto> data { get; set; }

	

	protected override async Task OnInitializedAsync()
	{
		data = await _viewModel.Get();
	}

	private async Task FilterByName(string name)
	{
		data = await _viewModel.GetByName(name);
	}
	
	private async Task GetByState(int id)
	{
		data = await _viewModel.GetByState(id);
	}

	private async Task UpdateState(int id)
	{
		if (await js.InvokeAsync<bool>("confirm", $"Do you processed this record?"))
		{
			await _viewModel.UpdateState(new ServiceUpdateRequestDto() {id = id, Statement = 1});
			data = await _viewModel.Get();
		}
	}
	
	private async Task DeleteRecord(int id)
	{
		if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete record?"))
		{
			await _viewModel.Delete(id);
			data = await _viewModel.Get();
		}
	}

}