@page "/manageModelTable"
@using AutoService.Client.Pages.ManagingForms
@using AutoService.Client.ViewModels
@using Autoservice.Infrastructure.Models
@using AutoService.WEBAPI.Dto
@inject MarkeCarViewModel _viewModel;
@inject ModelModCarViewModel _carViewModel;
@inject HttpClient _httpClient;
@inject IJSRuntime js;
@inject IHttpClientFactory ClientFactory;
@inject IModalService modal  

@if (data == null)
		         {
			         <text>LOADING...</text>
		         }
		         else if (!data.Any())
		         {
			         <text>No Records Found.</text>
		         }
		         else
		         {
			         <div class="modalFormWrapper">
				         <div class="inputWrapper" style="display: flex; margin: 0 30px">
						         <select  @onchange="DoStuff">
							         @foreach (var template in data)
							         {
								         <option value=@template.Id>@template.Name</option>
							         }
						         </select >
				         </div>
				         <div class="tableWrapper">
					         <table class="table table-sm">
						         <caption style="margin-top: 10px">
							         List of Car Models
						         </caption>
						         <thead>

						         <tr @onclick="() => Refresh()">
							         <th style="font-weight: 800; background-color: #e6e6e6; width: 30px ;    padding-top: 13px;">#</th>
							         <th style="font-weight: 800; background-color: #e6e6e6; width: 250px;    padding-top: 13px;">Model</th>
						         </tr>
						         </thead>
					         <tbody>
					         @if (pickedModel == null)
					         {
						         <text>Select...</text>
					         }
					         else if (pickedModel.ModelCars == null)
					         {
						         <text>No Records Found.</text>
					         }
					         else
					         {
						         @foreach (var entity  in pickedModel.ModelCars)
						         {
							         <tr id="parrent" style="height: 30px">
								         <td style="text-align: left">@entity.Id</td>
								         @*TODO onclick="() => ShowEditMovie(entity.Id)"*@
								         <td  style="text-align: left; padding-left: 30px">@entity.Name</td>
								         <td>
									         <button id="child" class="buttonTrash" @onclick="async () => await DeleteRecord(entity.Id)">
										         <i class="fa fa-trash" aria-hidden="true"></i>
									         </button>
								         </td>
							         </tr>
						         }
					         }
						         </tbody>
					         </table>
				         </div>
			         </div>
		         }
@code {
	List<MarkeCarDto> data { get; set; }
	public ModelCarDto model { get; set; } = new();
	MarkeCar pickedModel = new();
	
	async Task ShowEditMovie(int id)
	{
		var parameters = new ModalParameters();
		var marke = await _viewModel.GetById(id);
		parameters.Add("_marke", marke);
		parameters.Add("Data", data);

		modal.Show<EditCarForm>("Edit Manufacturer", parameters);
	}
	
	protected override async Task OnInitializedAsync()
	{
		data = await _viewModel.Get();
	}
	
	private async Task FilterByName(string name)
	{
		data = await _viewModel.GetByName(name);
	}
	
	private async Task DeleteRecord(int id)
	{
		if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete record?"))
		{
			await _viewModel.Delete(id);
			data = await _viewModel.Get();
		}
	}
	
	private async Task Refresh()
	{
		data = await _viewModel.Get();
	}

	public async Task DoStuff(ChangeEventArgs arg)
	{
		model.Id = Int32.Parse(arg.Value.ToString());
		pickedModel = await _carViewModel.GetCar(model.Id);
	}

}