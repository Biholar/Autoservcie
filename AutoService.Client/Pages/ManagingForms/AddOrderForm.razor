@page "/addOrderForm"
@inject CustomerViewModel _customerViewModel;
@inject ServiceTypeViewModel _serviceViewModel;
@inject ServiceCheckoutServiceTypeServiceSummServiceViewModel _viewModel;
@inject MasterViewModel _masterViewModel;
@inject OrderViewModel _orderViewModel;
@inject IJSRuntime js;
@inject IModalService modal;
@using AutoService.WEBAPI.Dto
@using AutoService.Client.ViewModels
@using Autoservice.Infrastructure.Models


<div class="wrapper">
	<div class="plusWrpper">
		
		<select @onchange="SelectCustomer" class="form-select form-control input-group mb-3">
				@if (CustomerCars == null)
                        {
                            <text>Loading...</text>
                        }
                        else if (!CustomerCars.Any())
                        {
                            <text>No Records Found.</text>
                        }
                        else
                        {
	                        <option disabled selected>Customer</option>
	                        foreach (var customer in CustomerCars)
	                        {
		                        <option value="@customer.CustomerId">@customer.Customer</option>
	                        }
                        }
		</select>
		<button @onclick="@(()=>modal.Show<AddCustomerForm>("Add new Customer"))" type="button" class="btn-light"><a>+</a></button>
	</div>

	<div class="plusWrpper">
		<select @onchange="SelectCustomerCar" class="form-select form-control input-group mb-3">
			<option disabled selected>Customer car</option>
			@if (PickedCustomer != 0)
			{
				foreach (var car in CustomerCars.Where(x => x.CustomerId == PickedCustomer).SelectMany(x=>x.Cars))
				{
					<option value="@car.CarId" >@car.carName</option>
				}
			}
		</select>
		<button type="button" class="btn-light"><a href="">+</a></button>
	</div>

	<div class="plusWrpper">
		<select @onchange="SelectServiceType" class="form-select form-control input-group mb-3">
			@if (ServiceTypes != null)
			{
				<option disabled selected>Service type</option>
				foreach (var services in ServiceTypes)
				{
					<option value="@services.Id" >@services.Name</option>
				}
			}
		</select>
	</div>


	<div class="input-group" style="margin-bottom: 120px">
		<textarea @bind="Request.ProblemDesc"
					placeholder="Problem"
						class="form-control"
						style="resize: none; height: 150px; margin-bottom: 120px"
					></textarea>
	</div>

	<div class="buttonWrapper">
		<button @onclick="() => Submit()" type="button" style="width: 120px" class="btn btn-success">OK</button>
		<button type="button" style="width: 120px" class="btn btn-danger">Cancel</button>
	</div>
</div>

@code
{
	public class Kostil
	{
		public List<string> cars;
	}
	
	AddServiceCheckoutDto Request = new AddServiceCheckoutDto();
	List<Customer> Customers; 
	List<CustomerCarsDto> CustomerCars; 
	List<ServiceTypeDto> ServiceTypes;
	
	ServiceCheckoutDto PreData = new ServiceCheckoutDto()
	{
		Id = 5,
		MaserId = 4,
		ProblemDesc = "Motor Problems",
		ServiceStatus = 1,
		TotalPrice = 700,
		CustomerCarId = 3
	};
	
	int PickedCustomer = 0;
	int PickedCustomerCar = 0;
	int PickedServiceType = 0;
	
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
	
	protected override async Task OnInitializedAsync()
	{
		CustomerCars = await _customerViewModel.GetCustomerCars();
		ServiceTypes = await _serviceViewModel.Get();
	}

	public async Task SelectCustomer(ChangeEventArgs arg)
	{
		PickedCustomer = Int32.Parse(arg.Value.ToString());
	}
	
	public async Task SelectCustomerCar(ChangeEventArgs arg)
	{
		PickedCustomerCar = Int32.Parse(arg.Value.ToString());
	}
	
	public async Task SelectServiceType(ChangeEventArgs arg)
	{
		PickedServiceType = Int32.Parse(arg.Value.ToString());
	}
	
	private async Task Submit()
	{
		Request.CustomerCarId = PickedCustomerCar;
		Request.ServiceTypeId = new List<int>(){PickedServiceType};
		await _viewModel.Create(Request);
		ModalInstance.CloseAsync();
	}
}
